{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Who am i","text":""},{"location":"tags/","title":"Tags","text":"<p>ansible</p>"},{"location":"Ansible/devcontainer/","title":"Dev Container","text":"<p>To speed up development on ansible i have created a dev container in visual studio using a docker backend, this allows you run ansible on any system.   ## Prerequisites</p> <ul> <li>Docker</li> <li>Visual Studio Code</li> <li>Dev container</li> </ul> <p>Once you have installed the prerequisites you can follow allong with this turtorial.</p>"},{"location":"Ansible/devcontainer/#lets-get-started","title":"Let's get started:","text":"<p>Create a new directory on your system since i am creating this turtorial on windows this wil live in c:\\temp i name my project dev_container.</p> <pre><code>mkdir c:\\temp\\dev_container\ncd c:\\temp\\dev_container\ncode .\n</code></pre> <p>The last command wil start visual studio code inside the folder. now inside the project we will create a new folder called .devcontainer and inside this folder create a new file devcontainer.json.</p> <pre><code>// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-dockerfile\n{\n    \"name\": \"python\",\n    \"build\": {\n        // Sets the run context to one level up instead of the .devcontainer folder.\n        \"context\": \"..\",\n        // Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.\n        \"dockerfile\": \"Dockerfile\"\n    },\n    \"forwardPorts\": [8080,8080],\n    \"mounts\": [\n        //\"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\"\n        //\"source=project,target=\"\n    ],\n    //\"postCreateCommand\": \"chmod +x /workspaces/awx/scripts/*.sh\",\n    \"customizations\": {\n    \"vscode\": {\n            \"extensions\": [\n                \"ms-python.python\",\n                \"shd101wyy.markdown-preview-enhanced\"\n            ]\n        }\n    }\n}\n\nThis docker file is depending on your needs , in the sample i am using a Python enviroment where the requirements are getting installed (make sure the requirements file is present)\n</code></pre>"},{"location":"Ansible/devcontainer/#dockerfile","title":"Dockerfile","text":"<p>Add in the same .devcontainer folder a new Dockerfile</p> <pre><code>FROM python:3.10-bullseye\nLABEL maintainer \"Seys Alain\"\nENV container \"docker\"\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN pip install --no-cache-dir -r requirements.txt\nRUN python3 -m pip install --upgrade pip\nRUN apt-get update -y &amp;&amp; \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \n\n</code></pre> <p>Now we have a pretty good base to work with to get strated with the dev container you can enter the hotkeys CTRL + SHIFT + P (Devcontainers Rebuild Container). When you do this Visual Studio Code will build the enviroment based on .devcontainer.json and Dockerfile.</p> <p>When this is ready you can startup a new console and work in your project like you work on a server.</p> <p>Notice when you need extra dependencies you need to add them to your dockerfile</p>"},{"location":"Ansible/molecule/","title":"Ansible Molecule","text":"<p>Molecule is used for testing your ansible roles this is a neat feature.</p> <p>To install molecule this can be done verry easly by adding the following to your requirements.txt inside your project.</p> <pre><code>molecule\nmolecule-docker\npytest-molecule\n</code></pre> <p>Here you can see i have added also docker , in my setup i test evrything against docker. This allows me to develop much faster.</p>","tags":["ansible","molecule"]},{"location":"Ansible/molecule/#usage","title":"Usage","text":"<p>Create e new module or open an existing one update meta/main</p> <pre><code>galaxy_info:\n    author: Seys Alain\n    description: Install Linux Updates\n    company: Seys Consults\n    role_name: linuxupdates\n    namespace: seysconsults\n</code></pre> <p>Next run the init command <code>molecule init scenario</code></p> <p>Now update converge.yml in molecule folder</p> <pre><code># Converge.yml\n---\n- name: Converge\n  hosts: all\n  gather_facts: true\n  vars:\n    ansible_python_interpreter: /usr/bin/python3\n  tasks:\n    - name: Execute main.yml\n      ansible.builtin.import_role:\n        name: name-of-your-role\n</code></pre> <p>Next up edit molecule.yml</p> <pre><code>---\ndriver:\n  name: docker\nplatforms:\n  - name: centos8\n    image: geerlingguy/docker-fedora40-ansible:latest\n    pre_build_image: true\n    command: ${MOLECULE_DOCKER_COMMAND:-\"\"}\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:rw\n    privileged: true\n  - name: debian12\n    image: geerlingguy/docker-debian12-ansible:latest\n    pre_build_image: true\n    command: ${MOLECULE_DOCKER_COMMAND:-\"\"}\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:rw\n    privileged: true\nprovisioner:\n  name: ansible\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint .\n</code></pre> <p>In this example i am using the docker images of Jef Geerling since these images are pretty stable and extendable (if you create your own docker images based on these examples).</p> <p>Thats it your molecule is ready to be run.</p> <p>Example usage: molecule test &amp;&amp; molecule converge</p>","tags":["ansible","molecule"]},{"location":"Ansible/molecule/#bonus-points","title":"Bonus points","text":"<p>Molecule is exendable with some reporting to html i have generated a bash script so if i run this command this generates a html report in a central location.</p> <pre><code>#!/bin/bash\nread - p \"Enter the report name \" injected_name\nset_date=$(date +\"%d_%m_%y\")\n\npytest --html=\"/workspaces/awx/Reports-UnitTests/$injected_name\"_\"$set_date\".html\n</code></pre>","tags":["ansible","molecule"]}]}